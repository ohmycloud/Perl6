# 超运算符

    分类: Perl6
    日期: 2013-05-16 19:33


pmichaud 在昨天介绍了 Perl 6 的 hyper 运算符,我这要进一步来探索 Perl6 中强大的元操作的特性.
首先,为简单起见,我将编写一个 lsay 的函数,可以轻松地得到好看的列表值的输出.这个 sub 是用我们用 Perl 来创建的

  
    our sub lsay( @a ) { @a.perl.say }


注:因为新的 Perl6 可以命令行直接显示变量内容,所以我下面的例子代码修改了不使用这个子函数

接下来我们看 hyperoperator 的例子.在这个中, 我们使用 >> 和 << 来替换** » **和** « **,主要因为这样更加容易看(我怕我会需要眼镜).»和« 是语言中真实的形式,但较长的 ASCII 字符版本也是可以正常工作的.

首先来个基本的:
添加两个相同长度的列表

     > (1, 2, 3, 4) <<+>> (3, 1, 3, 1)
     4, 3, 6, 5
     > (1, 2, 3, 4) >>+<< (3, 1, 3, 1)
     4, 3, 6, 5


如果数组的长度是**相同**的,上面这两种形式之间没有区别.但是,如果长度是不同的：
    
     > (1, 2, 3, 4) <<+>> (3, 1)
     4, 3, 6, 5
     > (1, 2, 3, 4) >>+<< (3, 1)
     Sorry, lists on both sides of non-dwimmy hyperop are not of same length :
     left: 4 elements, right: 2 elements


  这规则是, 象诸如此类的尖尖是用来表明 hyperoperator 在使用时, 当一端比另一端短,可以延长**短**的那一端来进行**扩展延伸** .
象如果是尖尖指向**内部**,是指不能进行扩展延伸 .当然,还可以有各种组合都是可以的.所以你也 能指出只有左边能扩展延伸 (<<+<<),也可以只指出只有右边能(>>+>>).当然也能两边都是可以扩展延伸 (<<+>>),或者二边都不能扩展延伸 (>>+<<).  R 语言中也有向量的循环法则。
单标量扩展延伸如下：

     > (1, 2, 3, 4) >>+>> 2
     3, 4, 5, 6
     > 3 <<+<< (1, 2, 3, 4)
     4, 5, 6, 7


因此,这就是基本的使用中缀操作符 hyperoperator 的方法.您还可以使用**前缀**和**后缀**运算符：
单边运算时，元素要能漏到操作符的右边(  如@a>>++  )或左边（ 如 ~<< -<< ）。想象一下漏斗，总是从大的口向小的口漏。
所以操作符前面或后面接什么样的超运算符要取决于**操作数**是在*操作符*的**前面**（用>>）或**后面**(用<<) ; 单边操作时还会产生副作用, 例如 @a>>++ 会修改数组 @a, 使数组元素都+1.

    > ~<<(1, 2, 3, 4)     # ~(1,2,3,4) 超运算符就是在普通运算符的后面，加强普通运算符的功能。如 ~<<
      "1" , "2" , "3" , "4"
    > -<<(1, 2, 3, 4)
    -1 -2 -3 -4
    > my @a = (1, 2, 3, 4); @a>>++; @a ;    # 单边运算时，@a与>>之间不能有空格，如不能写成@a >>+  
    2, 3, 4, 5


 

你也能这样:
    # 改写 map
    > map {$_.sin} , (0, pi/4, pi/2, pi, 2*pi)	
	
	# 超运算符对列表中的每个元素都调用sin函数(方法)
    > (0, pi/4, pi/2, pi, 2*pi)>>.sin  # R 中向量化的运算
    0, 0.707106781186547, 1, 1.22464679914735e-16, -2.44929359829471e-16
    > (-1, 0, 3, 42)>>.Str
    "-1" , "0" , "3" , "42"


这其实就是只是想说** >>. **是调用列表中的每一个成员的一种方法。点 (.)也是一个操作符

其他说明：hyperoperators 并**不只是**只能和内置操作符一起工作.他们也将能跟你定义以及任何新的**运算符**工作的很好（即大多数的的都能正常在现在的 Rakudo 上工作）.只要给放在适当的地方.如@a >>/=>>2 整个数组成员都除以 2. 他们将来能和更多的结构一起工作,如多维列表,树与哈希;我们可 S03 Hyper operators .(据我所知,有些功能还尚未在 Rakudo 正常实现)

我并不知道是否有很多代码示例中广泛使用 hyperoperators. 但 LastOfTheCarelessMen’s Vector 是一个非常好的实现.它使用单循环直接的实现了一个 N 维向量类.

本文为译文原作者 By colomon: http://perl6advent.wordpress.com/2009/12/06/day-6-going-into-hyperspace/

 